package de.borisskert.sudoku.core;

import org.junit.jupiter.api.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;

class ShuffleTest {

    @Test
    public void shouldShuffle22() throws Exception {
        Size size = Size.of(2, 2);

        Fields filled = Fields.createFilled(size);
        Fields shuffled = Shuffle.build().withSeed(123L).withSize(size).withFields(filled).shuffle();

        // @formatter:off
        String expected =
                "╔═╤═╦═╤═╗\n" +
                "║4│2║1│3║\n" +
                "╟─┼─╫─┼─╢\n" +
                "║1│3║4│2║\n" +
                "╠═╪═╬═╪═╣\n" +
                "║3│4║2│1║\n" +
                "╟─┼─╫─┼─╢\n" +
                "║2│1║3│4║\n" +
                "╚═╧═╩═╧═╝\n";
        // @formatter:on

        assertThat(Print.format(size, shuffled), is(equalTo(expected)));
    }

    @Test
    public void shouldShuffle33() throws Exception {
        Size size = Size.of(3, 3);

        Fields filled = Fields.createFilled(size);
        Fields shuffled = Shuffle.build().withSeed(123L).withSize(size).withFields(filled).shuffle();

        // @formatter:off
        String expected =
                "╔═╤═╤═╦═╤═╤═╦═╤═╤═╗\n" +
                "║5│7│8║4│3│2║9│1│6║\n" +
                "╟─┼─┼─╫─┼─┼─╫─┼─┼─╢\n" +
                "║2│4│3║9│6│1║7│5│8║\n" +
                "╟─┼─┼─╫─┼─┼─╫─┼─┼─╢\n" +
                "║1│9│6║7│8│5║4│2│3║\n" +
                "╠═╪═╪═╬═╪═╪═╬═╪═╪═╣\n" +
                "║4│6│2║8│1│9║3│7│5║\n" +
                "╟─┼─┼─╫─┼─┼─╫─┼─┼─╢\n" +
                "║7│3│5║6│2│4║8│9│1║\n" +
                "╟─┼─┼─╫─┼─┼─╫─┼─┼─╢\n" +
                "║9│8│1║3│5│7║6│4│2║\n" +
                "╠═╪═╪═╬═╪═╪═╬═╪═╪═╣\n" +
                "║6│1│4║5│9│8║2│3│7║\n" +
                "╟─┼─┼─╫─┼─┼─╫─┼─┼─╢\n" +
                "║8│5│9║2│7│3║1│6│4║\n" +
                "╟─┼─┼─╫─┼─┼─╫─┼─┼─╢\n" +
                "║3│2│7║1│4│6║5│8│9║\n" +
                "╚═╧═╧═╩═╧═╧═╩═╧═╧═╝\n";
        // @formatter:on

        assertThat(Print.format(size, shuffled), is(equalTo(expected)));
    }

    @Test
    public void shouldShuffle43() throws Exception {
        Size size = Size.of(4, 3);

        Fields filled = Fields.createFilled(size);
        Fields shuffled = Shuffle.build().withSeed(123L).withSize(size).withFields(filled).shuffle();

        // @formatter:off
        String expected =
                "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                "║ 3│ 6│ 1│11║ 7│12│ 5│ 9║ 4│ 8│10│ 2║\n" +
                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                "║ 5│ 9│ 7│12║ 2│ 8│10│ 4║ 6│11│ 3│ 1║\n" +
                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                "║10│ 4│ 2│ 8║ 1│11│ 3│ 6║ 9│12│ 5│ 7║\n" +
                "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                "║11│ 3│ 6│ 7║ 9│ 2│12│ 5║10│ 1│ 8│ 4║\n" +
                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                "║12│ 5│ 9│ 2║ 4│ 1│ 8│10║ 3│ 7│11│ 6║\n" +
                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                "║ 8│10│ 4│ 1║ 6│ 7│11│ 3║ 5│ 2│12│ 9║\n" +
                "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                "║ 1│ 8│10│ 6║ 3│ 9│ 7│11║12│ 4│ 2│ 5║\n" +
                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                "║ 2│12│ 5│ 4║10│ 6│ 1│ 8║11│ 9│ 7│ 3║\n" +
                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                "║ 7│11│ 3│ 9║ 5│ 4│ 2│12║ 8│ 6│ 1│10║\n" +
                "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                "║ 6│ 1│ 8│ 3║11│ 5│ 9│ 7║ 2│10│ 4│12║\n" +
                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                "║ 4│ 2│12│10║ 8│ 3│ 6│ 1║ 7│ 5│ 9│11║\n" +
                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                "║ 9│ 7│11│ 5║12│10│ 4│ 2║ 1│ 3│ 6│ 8║\n" +
                "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
        // @formatter:on
        assertThat(Print.format(size, shuffled), is(equalTo(expected)));
    }

    @Test
    public void shouldShuffle28() throws Exception {
        Size size = Size.of(2, 8);

        Fields filled = Fields.createFilled(size);
        Fields shuffled = Shuffle.build().withSeed(123L).withSize(size).withFields(filled).shuffle();

        // @formatter:off
        String expected =
                "╔══╤══╦══╤══╦══╤══╦══╤══╦══╤══╦══╤══╦══╤══╦══╤══╗\n" +
                "║ 8│ 7║12│14║13│ 9║ 3│16║ 2│15║ 5│11║ 6│ 1║ 4│10║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║ 3│16║15│ 2║ 5│11║ 1│ 6║ 4│10║ 8│ 7║12│14║13│ 9║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║ 5│11║ 6│ 1║ 4│10║ 8│ 7║14│12║13│ 9║16│ 3║ 2│15║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║ 2│15║11│ 5║ 1│ 6║ 4│10║ 8│ 7║14│12║ 9│13║ 3│16║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║ 4│10║ 7│ 8║14│12║13│ 9║ 3│16║ 2│15║11│ 5║ 1│ 6║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║13│ 9║16│ 3║ 2│15║ 5│11║ 1│ 6║ 4│10║ 7│ 8║14│12║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║14│12║ 9│13║ 3│16║ 2│15║ 5│11║ 1│ 6║10│ 4║ 8│ 7║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║ 1│ 6║10│ 4║ 8│ 7║14│12║13│ 9║ 3│16║15│ 2║ 5│11║\n" +
                "╠══╪══╬══╪══╬══╪══╬══╪══╬══╪══╬══╪══╬══╪══╬══╪══╣\n" +
                "║ 7│14║13│12║ 9│ 3║16│ 2║15│ 5║11│ 1║ 4│ 6║10│ 8║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║11│ 1║ 4│ 6║10│ 8║ 7│14║12│13║ 9│ 3║ 2│16║15│ 5║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║ 9│ 3║ 2│16║15│ 5║11│ 1║ 6│ 4║10│ 8║14│ 7║12│13║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║ 6│ 4║ 8│10║ 7│14║12│13║ 9│ 3║16│ 2║ 5│15║11│ 1║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║10│ 8║14│ 7║12│13║ 9│ 3║16│ 2║15│ 5║ 1│11║ 6│ 4║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║16│ 2║ 5│15║11│ 1║ 6│ 4║10│ 8║ 7│14║13│12║ 9│ 3║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║15│ 5║ 1│11║ 6│ 4║10│ 8║ 7│14║12│13║ 3│ 9║16│ 2║\n" +
                "╟──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╫──┼──╢\n" +
                "║12│13║ 3│ 9║16│ 2║15│ 5║11│ 1║ 6│ 4║ 8│10║ 7│14║\n" +
                "╚══╧══╩══╧══╩══╧══╩══╧══╩══╧══╩══╧══╩══╧══╩══╧══╝\n";
        // @formatter:on
        assertThat(Print.format(size, shuffled), is(equalTo(expected)));
    }
}
