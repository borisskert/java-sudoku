package de.borisskert.sudoku.core;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;

@DisplayName("Sudoku (4/3)")
public class SudokuFourThreeTest {

    private Sudoku sudoku;

    @BeforeEach
    public void setup() throws Exception {
        sudoku = Sudoku.create(4, 3);
    }

    @Test
    public void shouldPrintFields() throws Exception {
        // @formatter:off
        String expected =
           "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
           "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
           "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
        // @formatter:on

        assertThat(sudoku.toString(), is(equalTo(expected)));
    }

    @DisplayName("setup upper center subgrid")
    @Nested
    class UC {
        @BeforeEach
        public void setup() throws Exception {
            sudoku.set(4, 3, 12);
            sudoku.set(4, 5, 8);
            sudoku.set(5, 5, 10);
            sudoku.set(7, 3, 5);
        }

        @Test
        public void shouldPrintFields() throws Exception {
            // @formatter:off
            String expected =
                    "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                    "║  │  │  │  ║12│  │  │ 5║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║ 8│10│  │  ║  │  │  │  ║\n" +
                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
            // @formatter:on

            assertThat(sudoku.toString(), is(equalTo(expected)));
        }

        @DisplayName("setup some values on bottom-left subgrid")
        @Nested
        class BL {
            @BeforeEach
            public void setup() throws Exception {
                sudoku.set(0, 9, 12);
                sudoku.set(0, 10, 2);
                sudoku.set(1, 9, 3);
                sudoku.set(1, 10, 6);
                sudoku.set(3, 10, 10);
            }

            @Test
            public void shouldPrintFields() throws Exception {
                // @formatter:off
                String expected =
                    "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                    "║  │  │  │  ║12│  │  │ 5║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║ 8│10│  │  ║  │  │  │  ║\n" +
                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                    "║12│ 3│  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║ 2│ 6│  │10║  │  │  │  ║  │  │  │  ║\n" +
                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                    "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                // @formatter:on

                assertThat(sudoku.toString(), is(equalTo(expected)));
            }

            @DisplayName("Setup top-right subgrid")
            @Nested
            class TR {
                @BeforeEach
                public void setup() throws Exception {
                    sudoku.set(8, 1, 11);
                    sudoku.set(10, 1, 9);
                    sudoku.set(10, 2, 1);
                    sudoku.set(11, 1, 12);
                    sudoku.set(11, 2, 3);
                }

                @Test
                public void shouldPrintFields() throws Exception {
                    // @formatter:off
                    String expected =
                        "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                        "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                        "║  │  │  │  ║  │  │  │  ║11│  │ 9│12║\n" +
                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                        "║  │  │  │  ║  │  │  │  ║  │  │ 1│ 3║\n" +
                        "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                        "║  │  │  │  ║12│  │  │ 5║  │  │  │  ║\n" +
                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                        "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                        "║  │  │  │  ║ 8│10│  │  ║  │  │  │  ║\n" +
                        "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                        "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                        "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                        "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                        "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                        "║12│ 3│  │  ║  │  │  │  ║  │  │  │  ║\n" +
                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                        "║ 2│ 6│  │10║  │  │  │  ║  │  │  │  ║\n" +
                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                        "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                        "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                    // @formatter:on

                    assertThat(sudoku.toString(), is(equalTo(expected)));
                }

                @DisplayName("Setup lower/middle subgrid")
                @Nested
                class LM {
                    @BeforeEach
                    public void setup() throws Exception {
                        sudoku.set(6, 6, 11);
                        sudoku.set(7, 6, 2);
                        sudoku.set(4, 8, 4);
                        sudoku.set(7, 8, 7);
                    }

                    @Test
                    public void shouldPrintFields() throws Exception {
                        // @formatter:off
                        String expected =
                            "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                            "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                            "║  │  │  │  ║  │  │  │  ║11│  │ 9│12║\n" +
                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                            "║  │  │  │  ║  │  │  │  ║  │  │ 1│ 3║\n" +
                            "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                            "║  │  │  │  ║12│  │  │ 5║  │  │  │  ║\n" +
                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                            "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                            "║  │  │  │  ║ 8│10│  │  ║  │  │  │  ║\n" +
                            "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                            "║  │  │  │  ║  │  │11│ 2║  │  │  │  ║\n" +
                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                            "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                            "║  │  │  │  ║ 4│  │  │ 7║  │  │  │  ║\n" +
                            "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                            "║12│ 3│  │  ║  │  │  │  ║  │  │  │  ║\n" +
                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                            "║ 2│ 6│  │10║  │  │  │  ║  │  │  │  ║\n" +
                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                            "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                            "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                        // @formatter:on

                        assertThat(sudoku.toString(), is(equalTo(expected)));
                    }

                    @DisplayName("Setup top/left subgrid")
                    @Nested
                    class TL {
                        @BeforeEach
                        public void setup() throws Exception {
                            sudoku.set(3, 0, 7);
                            sudoku.set(0, 2, 4);
                            sudoku.set(3, 2, 9);
                        }

                        @Test
                        public void shouldPrintFields() throws Exception {
                            // @formatter:off
                            String expected =
                                    "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                                    "║  │  │  │ 7║  │  │  │  ║  │  │  │  ║\n" +
                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                    "║  │  │  │  ║  │  │  │  ║11│  │ 9│12║\n" +
                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                    "║ 4│  │  │ 9║  │  │  │  ║  │  │ 1│ 3║\n" +
                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                    "║  │  │  │  ║12│  │  │ 5║  │  │  │  ║\n" +
                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                    "║  │  │  │  ║ 8│10│  │  ║  │  │  │  ║\n" +
                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                    "║  │  │  │  ║  │  │11│ 2║  │  │  │  ║\n" +
                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                    "║  │  │  │  ║ 4│  │  │ 7║  │  │  │  ║\n" +
                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                    "║12│ 3│  │  ║  │  │  │  ║  │  │  │  ║\n" +
                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                    "║ 2│ 6│  │10║  │  │  │  ║  │  │  │  ║\n" +
                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                    "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                                    "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                            // @formatter:on

                            assertThat(sudoku.toString(), is(equalTo(expected)));
                        }

                        @DisplayName("Setup lower/right subgrid")
                        @Nested
                        class LR {
                            @BeforeEach
                            public void setup() throws Exception {
                                sudoku.set(8, 6, 1);
                                sudoku.set(8, 7, 4);
                                sudoku.set(9, 8, 3);
                                sudoku.set(10, 6, 12);
                            }

                            @Test
                            public void shouldPrintFields() throws Exception {
                                // @formatter:off
                                String expected =
                                        "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                                        "║  │  │  │ 7║  │  │  │  ║  │  │  │  ║\n" +
                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                        "║  │  │  │  ║  │  │  │  ║11│  │ 9│12║\n" +
                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                        "║ 4│  │  │ 9║  │  │  │  ║  │  │ 1│ 3║\n" +
                                        "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                        "║  │  │  │  ║12│  │  │ 5║  │  │  │  ║\n" +
                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                        "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                        "║  │  │  │  ║ 8│10│  │  ║  │  │  │  ║\n" +
                                        "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                        "║  │  │  │  ║  │  │11│ 2║ 1│  │12│  ║\n" +
                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                        "║  │  │  │  ║  │  │  │  ║ 4│  │  │  ║\n" +
                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                        "║  │  │  │  ║ 4│  │  │ 7║  │ 3│  │  ║\n" +
                                        "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                        "║12│ 3│  │  ║  │  │  │  ║  │  │  │  ║\n" +
                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                        "║ 2│ 6│  │10║  │  │  │  ║  │  │  │  ║\n" +
                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                        "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                                        "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                                // @formatter:on

                                assertThat(sudoku.toString(), is(equalTo(expected)));
                            }

                            @DisplayName("Setup upper/left subgrid")
                            @Nested
                            class UL {
                                @BeforeEach
                                public void setup() throws Exception {
                                    sudoku.set(2, 3, 8);
                                    sudoku.set(3, 4, 12);
                                    sudoku.set(1, 5, 2);
                                    sudoku.set(3, 5, 11);
                                }

                                @Test
                                public void shouldPrintFields() throws Exception {
                                    // @formatter:off
                                    String expected =
                                            "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                                            "║  │  │  │ 7║  │  │  │  ║  │  │  │  ║\n" +
                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                            "║  │  │  │  ║  │  │  │  ║11│  │ 9│12║\n" +
                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                            "║ 4│  │  │ 9║  │  │  │  ║  │  │ 1│ 3║\n" +
                                            "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                            "║  │  │ 8│  ║12│  │  │ 5║  │  │  │  ║\n" +
                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                            "║  │  │  │12║  │  │  │  ║  │  │  │  ║\n" +
                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                            "║  │ 2│  │11║ 8│10│  │  ║  │  │  │  ║\n" +
                                            "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                            "║  │  │  │  ║  │  │11│ 2║ 1│  │12│  ║\n" +
                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                            "║  │  │  │  ║  │  │  │  ║ 4│  │  │  ║\n" +
                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                            "║  │  │  │  ║ 4│  │  │ 7║  │ 3│  │  ║\n" +
                                            "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                            "║12│ 3│  │  ║  │  │  │  ║  │  │  │  ║\n" +
                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                            "║ 2│ 6│  │10║  │  │  │  ║  │  │  │  ║\n" +
                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                            "║  │  │  │  ║  │  │  │  ║  │  │  │  ║\n" +
                                            "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                                    // @formatter:on

                                    assertThat(sudoku.toString(), is(equalTo(expected)));
                                }

                                @DisplayName("Setup bottom/right subgrid")
                                @Nested
                                class BR {
                                    @BeforeEach
                                    public void setup() throws Exception {
                                        sudoku.set(8, 9, 10);
                                        sudoku.set(8, 11, 7);
                                        sudoku.set(11, 9, 1);
                                    }

                                    @Test
                                    public void shouldPrintFields() throws Exception {
                                        // @formatter:off
                                        String expected =
                                                "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                                                "║  │  │  │ 7║  │  │  │  ║  │  │  │  ║\n" +
                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                "║  │  │  │  ║  │  │  │  ║11│  │ 9│12║\n" +
                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                "║ 4│  │  │ 9║  │  │  │  ║  │  │ 1│ 3║\n" +
                                                "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                "║  │  │ 8│  ║12│  │  │ 5║  │  │  │  ║\n" +
                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                "║  │  │  │12║  │  │  │  ║  │  │  │  ║\n" +
                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                "║  │ 2│  │11║ 8│10│  │  ║  │  │  │  ║\n" +
                                                "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                "║  │  │  │  ║  │  │11│ 2║ 1│  │12│  ║\n" +
                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                "║  │  │  │  ║  │  │  │  ║ 4│  │  │  ║\n" +
                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                "║  │  │  │  ║ 4│  │  │ 7║  │ 3│  │  ║\n" +
                                                "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                "║12│ 3│  │  ║  │  │  │  ║10│  │  │ 1║\n" +
                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                "║ 2│ 6│  │10║  │  │  │  ║  │  │  │  ║\n" +
                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                "║  │  │  │  ║  │  │  │  ║ 7│  │  │  ║\n" +
                                                "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                                        // @formatter:on

                                        assertThat(sudoku.toString(), is(equalTo(expected)));
                                    }

                                    @DisplayName("Setup top/center subgrid")
                                    @Nested
                                    class TC {
                                        @BeforeEach
                                        public void setup() throws Exception {
                                            sudoku.set(6, 0, 12);
                                            sudoku.set(4, 1, 10);
                                            sudoku.set(7, 1, 1);
                                            sudoku.set(4, 2, 7);
                                            sudoku.set(6, 2, 5);
                                            sudoku.set(7, 2, 11);
                                        }

                                        @Test
                                        public void shouldPrintFields() throws Exception {
                                            // @formatter:off
                                            String expected =
                                                    "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                                                    "║  │  │  │ 7║  │  │12│  ║  │  │  │  ║\n" +
                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                    "║  │  │  │  ║10│  │  │ 1║11│  │ 9│12║\n" +
                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                    "║ 4│  │  │ 9║ 7│  │ 5│11║  │  │ 1│ 3║\n" +
                                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                    "║  │  │ 8│  ║12│  │  │ 5║  │  │  │  ║\n" +
                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                    "║  │  │  │12║  │  │  │  ║  │  │  │  ║\n" +
                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                    "║  │ 2│  │11║ 8│10│  │  ║  │  │  │  ║\n" +
                                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                    "║  │  │  │  ║  │  │11│ 2║ 1│  │12│  ║\n" +
                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                    "║  │  │  │  ║  │  │  │  ║ 4│  │  │  ║\n" +
                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                    "║  │  │  │  ║ 4│  │  │ 7║  │ 3│  │  ║\n" +
                                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                    "║12│ 3│  │  ║  │  │  │  ║10│  │  │ 1║\n" +
                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                    "║ 2│ 6│  │10║  │  │  │  ║  │  │  │  ║\n" +
                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                    "║  │  │  │  ║  │  │  │  ║ 7│  │  │  ║\n" +
                                                    "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                                            // @formatter:on

                                            assertThat(sudoku.toString(), is(equalTo(expected)));
                                        }

                                        @DisplayName("Setup bottom/center subgrid")
                                        @Nested
                                        class BC {
                                            @BeforeEach
                                            public void setup() throws Exception {
                                                sudoku.set(4, 9, 2);
                                                sudoku.set(5, 9, 9);
                                                sudoku.set(7, 9, 4);
                                                sudoku.set(4, 10, 11);
                                                sudoku.set(7, 10, 3);
                                                sudoku.set(5, 11, 5);
                                            }

                                            @Test
                                            public void shouldPrintFields() throws Exception {
                                                // @formatter:off
                                                String expected =
                                                        "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                                                        "║  │  │  │ 7║  │  │12│  ║  │  │  │  ║\n" +
                                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                        "║  │  │  │  ║10│  │  │ 1║11│  │ 9│12║\n" +
                                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                        "║ 4│  │  │ 9║ 7│  │ 5│11║  │  │ 1│ 3║\n" +
                                                        "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                        "║  │  │ 8│  ║12│  │  │ 5║  │  │  │  ║\n" +
                                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                        "║  │  │  │12║  │  │  │  ║  │  │  │  ║\n" +
                                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                        "║  │ 2│  │11║ 8│10│  │  ║  │  │  │  ║\n" +
                                                        "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                        "║  │  │  │  ║  │  │11│ 2║ 1│  │12│  ║\n" +
                                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                        "║  │  │  │  ║  │  │  │  ║ 4│  │  │  ║\n" +
                                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                        "║  │  │  │  ║ 4│  │  │ 7║  │ 3│  │  ║\n" +
                                                        "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                        "║12│ 3│  │  ║ 2│ 9│  │ 4║10│  │  │ 1║\n" +
                                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                        "║ 2│ 6│  │10║11│  │  │ 3║  │  │  │  ║\n" +
                                                        "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                        "║  │  │  │  ║  │ 5│  │  ║ 7│  │  │  ║\n" +
                                                        "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                                                // @formatter:on

                                                assertThat(sudoku.toString(), is(equalTo(expected)));
                                            }

                                            @DisplayName("Setup upper right subgrid")
                                            @Nested
                                            class UR {
                                                @BeforeEach
                                                public void setup() throws Exception {
                                                    sudoku.set(8, 4, 3);
                                                    sudoku.set(9, 4, 11);
                                                    sudoku.set(10, 4, 8);
                                                    sudoku.set(8, 5, 5);
                                                    sudoku.set(11, 5, 7);
                                                }

                                                @Test
                                                public void shouldPrintFields() throws Exception {
                                                    // @formatter:off
                                                    String expected =
                                                            "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                                                            "║  │  │  │ 7║  │  │12│  ║  │  │  │  ║\n" +
                                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                            "║  │  │  │  ║10│  │  │ 1║11│  │ 9│12║\n" +
                                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                            "║ 4│  │  │ 9║ 7│  │ 5│11║  │  │ 1│ 3║\n" +
                                                            "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                            "║  │  │ 8│  ║12│  │  │ 5║  │  │  │  ║\n" +
                                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                            "║  │  │  │12║  │  │  │  ║ 3│11│ 8│  ║\n" +
                                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                            "║  │ 2│  │11║ 8│10│  │  ║ 5│  │  │ 7║\n" +
                                                            "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                            "║  │  │  │  ║  │  │11│ 2║ 1│  │12│  ║\n" +
                                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                            "║  │  │  │  ║  │  │  │  ║ 4│  │  │  ║\n" +
                                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                            "║  │  │  │  ║ 4│  │  │ 7║  │ 3│  │  ║\n" +
                                                            "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                            "║12│ 3│  │  ║ 2│ 9│  │ 4║10│  │  │ 1║\n" +
                                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                            "║ 2│ 6│  │10║11│  │  │ 3║  │  │  │  ║\n" +
                                                            "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                            "║  │  │  │  ║  │ 5│  │  ║ 7│  │  │  ║\n" +
                                                            "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                                                    // @formatter:on

                                                    assertThat(sudoku.toString(), is(equalTo(expected)));
                                                }

                                                @DisplayName("Setup lower/left subgrid")
                                                @Nested
                                                class LL {
                                                    @BeforeEach
                                                    public void setup() throws Exception {
                                                        sudoku.set(0, 6, 9);
                                                        sudoku.set(3, 6, 3);
                                                        sudoku.set(1, 7, 5);
                                                        sudoku.set(2, 7, 11);
                                                        sudoku.set(3, 7, 2);

                                                        sudoku.resolve();
                                                    }

                                                    @Test
                                                    public void shouldPrintFields() throws Exception {
                                                        // @formatter:off
                                                        String expected =
                                                                "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                                                                "║  │  │  │ 7║  │  │12│  ║  │  │  │  ║\n" +
                                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                "║  │ 8│  │  ║10│  │  │ 1║11│  │ 9│12║\n" +
                                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                "║ 4│  │  │ 9║ 7│  │ 5│11║  │  │ 1│ 3║\n" +
                                                                "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                                "║  │  │ 8│  ║12│  │  │ 5║  │  │  │  ║\n" +
                                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                "║  │  │  │12║  │  │  │  ║ 3│11│ 8│  ║\n" +
                                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                "║  │ 2│  │11║ 8│10│  │  ║ 5│  │  │ 7║\n" +
                                                                "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                                "║ 9│  │  │ 3║  │  │11│ 2║ 1│  │12│  ║\n" +
                                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                "║  │ 5│11│ 2║  │  │  │  ║ 4│  │  │  ║\n" +
                                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                "║  │  │  │  ║ 4│  │  │ 7║  │ 3│  │  ║\n" +
                                                                "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                                "║12│ 3│  │  ║ 2│ 9│  │ 4║10│  │  │ 1║\n" +
                                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                "║ 2│ 6│  │10║11│  │  │ 3║  │  │  │  ║\n" +
                                                                "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                "║  │  │  │  ║  │ 5│  │  ║ 7│  │  │  ║\n" +
                                                                "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                                                        // @formatter:on

                                                        assertThat(sudoku.toString(), is(equalTo(expected)));
                                                    }

                                                    @DisplayName("Resolve sudoku")
                                                    @Nested
                                                    class Resolve {
                                                        @BeforeEach
                                                        public void setup() throws Exception {
                                                            sudoku.set(0, 0, 10);
                                                            sudoku.solve();
                                                        }

                                                        @Test
                                                        public void shouldBeSolved() throws Exception {
                                                            assertThat(sudoku.isSolved(), is(equalTo(true)));
                                                        }

                                                        @Test
                                                        public void shouldPrintFields() throws Exception {
                                                            // @formatter:off
                                                            String expected =
                                                                    "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
                                                                    "║10│11│ 1│ 7║ 9│ 3│12│ 8║ 6│ 4│ 2│ 5║\n" +
                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                    "║ 3│ 8│ 2│ 5║10│ 4│ 6│ 1║11│ 7│ 9│12║\n" +
                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                    "║ 4│12│ 6│ 9║ 7│ 2│ 5│11║ 8│10│ 1│ 3║\n" +
                                                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                                    "║ 7│ 4│ 8│ 6║12│11│ 3│ 5║ 9│ 1│10│ 2║\n" +
                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                    "║ 5│ 9│10│12║ 1│ 7│ 2│ 6║ 3│11│ 8│ 4║\n" +
                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                    "║ 1│ 2│ 3│11║ 8│10│ 4│ 9║ 5│12│ 6│ 7║\n" +
                                                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                                    "║ 9│ 7│ 4│ 3║ 5│ 6│11│ 2║ 1│ 8│12│10║\n" +
                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                    "║ 8│ 5│11│ 2║ 3│12│ 1│10║ 4│ 9│ 7│ 6║\n" +
                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                    "║ 6│10│12│ 1║ 4│ 8│ 9│ 7║ 2│ 3│ 5│11║\n" +
                                                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
                                                                    "║12│ 3│ 5│ 8║ 2│ 9│ 7│ 4║10│ 6│11│ 1║\n" +
                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                    "║ 2│ 6│ 7│10║11│ 1│ 8│ 3║12│ 5│ 4│ 9║\n" +
                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
                                                                    "║11│ 1│ 9│ 4║ 6│ 5│10│12║ 7│ 2│ 3│ 8║\n" +
                                                                    "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
                                                            // @formatter:on

                                                            assertThat(sudoku.toString(), is(equalTo(expected)));
                                                        }
                                                    }
//
//                                                    @DisplayName("set suggested field value (1/2) -> 10")
//                                                    @Nested
//                                                    class S {
//                                                        @BeforeEach
//                                                        public void setup() throws Exception {
//                                                            sudoku.set(1, 2, 10);
//                                                            sudoku.set(1, 0, 1);
//                                                            sudoku.set(1, 6, 7);
//                                                            sudoku.set(1, 3, 9);
//                                                            sudoku.set(0, 11, 8);
//                                                            sudoku.set(0, 1, 5);
//                                                            sudoku.set(0, 0, 11);
//                                                            sudoku.set(0, 5, 3);
//                                                        }
//
//                                                        @Test
//                                                        public void shouldPrintFields() throws Exception {
//                                                            // @formatter:off
//                                                            String expected =
//                                                                    "╔══╤══╤══╤══╦══╤══╤══╤══╦══╤══╤══╤══╗\n" +
//                                                                    "║11│ 1│  │ 7║  │  │12│  ║  │  │  │  ║\n" +
//                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
//                                                                    "║ 5│ 8│  │ 6║10│  │  │ 1║11│  │ 9│12║\n" +
//                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
//                                                                    "║ 4│10│  │ 9║ 7│  │ 5│11║  │  │ 1│ 3║\n" +
//                                                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
//                                                                    "║  │ 9│ 8│ 1║12│  │  │ 5║  │  │  │  ║\n" +
//                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
//                                                                    "║  │ 4│  │12║  │  │  │  ║ 3│11│ 8│  ║\n" +
//                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
//                                                                    "║ 3│ 2│  │11║ 8│10│  │  ║ 5│  │  │ 7║\n" +
//                                                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
//                                                                    "║ 9│ 7│  │ 3║  │  │11│ 2║ 1│  │12│  ║\n" +
//                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
//                                                                    "║  │ 5│11│ 2║  │  │  │  ║ 4│  │  │  ║\n" +
//                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
//                                                                    "║  │12│  │ 8║ 4│  │  │ 7║  │ 3│  │  ║\n" +
//                                                                    "╠══╪══╪══╪══╬══╪══╪══╪══╬══╪══╪══╪══╣\n" +
//                                                                    "║12│ 3│ 7│ 5║ 2│ 9│  │ 4║10│  │  │ 1║\n" +
//                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
//                                                                    "║ 2│ 6│  │10║11│  │  │ 3║  │  │  │  ║\n" +
//                                                                    "╟──┼──┼──┼──╫──┼──┼──┼──╫──┼──┼──┼──╢\n" +
//                                                                    "║ 8│11│  │ 4║  │ 5│  │  ║ 7│  │  │  ║\n" +
//                                                                    "╚══╧══╧══╧══╩══╧══╧══╧══╩══╧══╧══╧══╝\n";
//                                                            // @formatter:on
//
//                                                            assertThat(sudoku.toString(), is(equalTo(expected)));
//                                                        }
//
//                                                        @Test
//                                                        public void shouldSuggestNextField() throws Exception {
//                                                            Field suggested = sudoku.suggestField().get();
//                                                            assertThat(suggested.getX(), is(equalTo(0)));
//                                                            assertThat(suggested.getY(), is(equalTo(5)));
//                                                            assertThat(suggested.getCandidates().size(), is(equalTo(2)));
//
//                                                            System.out.println(suggested.getCandidates());
//                                                        }
//                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
